h1. RubyTime

RubyTime is a web application for time tracking and invoicing, written in Ruby using Rails 3 framework.

h2. History

RubyTime "started its life":http://code.google.com/p/rubytime/ in 2006 as an experiment in Ruby and Rails, using a pre-1.0 version of the framework. It was later gradually improved, extended and upgraded to newer versions of Rails, through the 1.x and 2.x releases up to Rails 2.1.

Then, two years later, something has changed: a new framework, called Merb, became popular in the Ruby community. It seemed to have a bright future at that point, so in autumn 2008 we've completely rewritten RubyTime in Merb 1.0 and DataMapper, together with a new layout and design.

Another couple of years have passed and things have changed again. The Merb team had joined the Rails project and Merb was basically abandoned without even a clear migration path to Rails 3. So in 2011 we took the effort to switch back to Rails, and we've migrated RubyTime to Rails 3.0 (while leaving the DataMapper ORM, as the new Rails have no problem with working with ORMs other than ActiveRecord).

h2. Recent changes

See "CHANGELOG.txt":http://github.com/LunarLogicPolska/rubytime/raw/stable/CHANGELOG.txt.

h2. Setup

h3. Prerequisites

You need to have Ruby, RubyGems and the Bundler gem (1.0+) installed on your server.

Ruby 1.9.2 or higher is recommended, but Ruby 1.8.7 should work too.

h3. Get the source

Next get the source code from RubyTime git repository ('stable' branch is recommended):

bc. git clone git://github.com/LunarLogicPolska/rubytime.git -b stable

h3. Install gems

Inside the rubytime directory, install gems using Bundler:

bc. bundle install

Note: on 64 bit architectures, you may have to set ARCHFLAGS='-arch x86_64' in your shell environment, otherwise some compiled gems (do_mysql) may not work.

h3. Configure

* copy config/database.yml.example to config/database.yml, then edit it to match your database configuration
* copy config/local_config.rb.example to config/local_config.rb, then set application domain and mailer "From" address
* copy config/schedule.rb.example to config/schedule.rb and update it to set your reminder schedules
* copy config/ldap.yml.example to config/ldap.yml and set your LDAP address/port if you want LDAP authentication support

h3. Running in development mode (on local machine)

To create a development database, run:

bc. bundle exec rake db:setup

This will create a new database in MySQL, add all required tables and fill them with initial data (admin account, example clients and projects). Note: this destroys existing structure and data.

You can also create the database manually and call @bundle exec rake db:automigrate@ to create the tables and @bundle exec take db:seed@ to populate it with records.

Then run the application:

bc. bundle exec rails s

Point your browser to url set in config/local/config.rb and login as @admin@ with password @password@

h3. Deploying to production server

Deployment is done using the Vlad library. Make a copy of config/deploy.rb.example in config/deploy.rb, and edit the server, username and directory values according to your setup. You can add or remove environments (staging and prodution are included by default). Deploy.rb assumes you use Passenger - you'll have to customize it if you use something else.

On the server, create a production database (named @rubytime3_prod@ by default). Then, back on your development machine, call Vlad to create directory structure on the server:

bc. bundle exec rake production vlad:setup

If necessary, replace 'production' with 'staging' or whatever other environment you have configured in deploy.rb. Then, inside the "shared" directory created by Vlad in the project directory on the server, create a "config" directory, prepare copies of database.yml and local_config.rb configured for your server, and put them inside the shared/config directory.

Call Vlad again (from development machine) to deploy the code:

bc. bundle exec rake production vlad:deploy_with_db_reset

Back on the server, populate the database with initial data (call from project's 'current' directory):

bc. RAILS_ENV=production bundle exec rake db:seed

Your server should be ready. If it's not, try deploying once again:

bc. bundle exec rake production vlad:deploy

For future deployments, use @bundle exec rake production vlad:deploy@ for normal deploys and @bundle exec rake production vlad:deploy_with_autoupgrade@ if you need to change database schema.


h2. iPhone app

There is an iPhone app for RubyTime, called iRubyTime, "also available on GitHub":http://github.com/psionides/iRubyTime. You can also download it from "the AppStore":http://itunes.apple.com/us/app/irubytime/id355303566?mt=8. You need RubyTime 3.1.1 or later if you want to use iRubyTime.

h2. Contact & information

"www.rubytime.org":http://www.rubytime.org

"www.lunarlogicpolska.com":http://www.lunarlogicpolska.com
